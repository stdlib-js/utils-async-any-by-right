{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../node_modules/debug/src/index.js","../lib/limit.js","../lib/factory.js","../lib/any_by_right.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {*} [options.thisArg] - execution context\n* @param {PositiveInteger} [options.limit] - maximum number of pending invocations at any one time\n* @param {boolean} [options.series] - boolean indicating whether to wait for a previous invocation to complete before invoking a provided function for the next element in a collection\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'thisArg': {},\n*     'series': false,\n*     'limit': 10\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'thisArg' ) ) {\n\t\topts.thisArg = options.thisArg;\n\t}\n\tif ( hasOwnProp( options, 'series' ) ) {\n\t\topts.series = options.series;\n\t\tif ( !isBoolean( opts.series ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'series', opts.series ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'limit' ) ) {\n\t\topts.limit = options.limit;\n\t\tif ( !isPositiveInteger( opts.limit ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'limit', opts.limit ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n * Detect Electron renderer process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process !== 'undefined' && process.type === 'renderer') {\n  module.exports = require('./browser.js');\n} else {\n  module.exports = require('./node.js');\n}\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar logger = require( 'debug' );\n\n\n// VARIABLES //\n\nvar debug = logger( 'any-by-right-async:limit' );\n\n\n// MAIN //\n\n/**\n* Invokes a predicate function once for each element in a collection, limiting the number of concurrently pending functions and iterating from right to left.\n*\n* @private\n* @param {Collection} collection - input collection\n* @param {Options} opts - function options\n* @param {*} [opts.thisArg] - execution context\n* @param {PositiveInteger} [opts.limit] - maximum number of pending function invocations\n* @param {Function} predicate - predicate function\n* @param {Callback} done - function to invoke upon completion or upon encountering an error\n* @returns {void}\n*/\nfunction limit( collection, opts, predicate, done ) {\n\tvar count;\n\tvar flg;\n\tvar lim;\n\tvar len;\n\tvar idx;\n\tvar i;\n\n\tlen = collection.length;\n\tdebug( 'Collection length: %d', len );\n\n\tif ( len === 0 ) {\n\t\tdebug( 'Finished processing a collection.' );\n\t\treturn done( null, false );\n\t}\n\tif ( len < opts.limit ) {\n\t\tlim = len;\n\t} else {\n\t\tlim = opts.limit;\n\t}\n\tdebug( 'Concurrency limit: %d', lim );\n\tdebug( 'Number of arguments: %d', predicate.length );\n\n\tcount = 0;\n\tidx = len;\n\tfor ( i = 0; i < lim; i++ ) {\n\t\t// This guard is necessary to protect against synchronous functions which exhaust all collection elements...\n\t\tif ( idx > 0 ) {\n\t\t\tnext(); // eslint-disable-line node/callback-return\n\t\t}\n\t}\n\n\t/**\n\t* Callback to invoke a provided function for the next element in a collection.\n\t*\n\t* @private\n\t*/\n\tfunction next() {\n\t\tidx -= 1;\n\t\tdebug( 'Collection element %d: %s.', idx, JSON.stringify( collection[ idx ] ) );\n\t\tif ( predicate.length === 2 ) {\n\t\t\tpredicate.call( opts.thisArg, collection[ idx ], clbk );\n\t\t} else if ( predicate.length === 3 ) {\n\t\t\tpredicate.call( opts.thisArg, collection[ idx ], idx, clbk );\n\t\t} else {\n\t\t\tpredicate.call( opts.thisArg, collection[ idx ], idx, collection, clbk ); // eslint-disable-line max-len\n\t\t}\n\t}\n\n\t/**\n\t* Callback invoked once a provided function finishes processing a collection element.\n\t*\n\t* @private\n\t* @param {*} [error] - error\n\t* @param {*} [result] - test result\n\t* @returns {void}\n\t*/\n\tfunction clbk( error, result ) {\n\t\tif ( flg ) {\n\t\t\t// Prevent further processing of collection elements:\n\t\t\treturn;\n\t\t}\n\t\tif ( error ) {\n\t\t\tflg = true;\n\t\t\tdebug( 'Encountered an error: %s', error.message );\n\t\t\treturn done( error );\n\t\t}\n\t\tcount += 1;\n\t\tdebug( 'Processed %d of %d collection elements.', count, len );\n\n\t\tdebug( 'Test result: %s', !!result );\n\t\tif ( result && !flg ) {\n\t\t\tflg = true;\n\t\t\tdebug( 'Finished processing a collection.' );\n\t\t\treturn done( null, true );\n\t\t}\n\t\tif ( idx > 0 ) {\n\t\t\treturn next();\n\t\t}\n\t\tif ( count === len ) {\n\t\t\tdebug( 'Finished processing a collection.' );\n\t\t\treturn done( null, false );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = limit;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar format = require( '@stdlib/string-format' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar validate = require( './validate.js' );\nvar limit = require( './limit.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for testing whether at least one element in a collection passes a test implemented by a predicate function, iterating from right to left.\n*\n* ## Notes\n*\n* -   If a predicate function calls the provided callback with a truthy error argument, the function suspends execution and immediately calls the `done` callback for subsequent error handling.\n* -   This function does **not** guarantee that execution is asynchronous. To do so, wrap the `done` callback in a function which either executes at the end of the current stack (e.g., `nextTick`) or during a subsequent turn of the event loop (e.g., `setImmediate`, `setTimeout`).\n*\n*\n* @param {Options} [options] - function options\n* @param {*} [options.thisArg] - execution context\n* @param {PositiveInteger} [options.limit] - maximum number of pending invocations at any one time\n* @param {boolean} [options.series=false] - boolean indicating whether to wait for a previous invocation to complete before invoking a provided function for the next element in a collection\n* @param {Function} predicate - predicate function to invoke for each element in a collection\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} last argument must be a function\n* @returns {Function} function which invokes the predicate function once for each element in a collection\n*\n* @example\n* var readFile = require( '@stdlib/fs-read-file' );\n*\n* function predicate( file, next ) {\n*     var opts = {\n*         'encoding': 'utf8'\n*     };\n*     readFile( file, opts, onFile );\n*\n*     function onFile( error ) {\n*         if ( error ) {\n*             return next( null, false );\n*         }\n*         next( null, true );\n*     }\n* }\n*\n* var opts = {\n*     'series': true\n* };\n*\n* // Create a `anyByRightAsync` function which invokes the predicate function for each collection element sequentially:\n* var anyByRightAsync = factory( opts, predicate );\n*\n* // Create a collection over which to iterate:\n* var files = [\n*     './beep.js',\n*     './boop.js'\n* ];\n*\n* // Define a callback which handles results:\n* function done( error, bool ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     if ( bool ) {\n*         console.log( 'Successfully read at least one file.' );\n*     } else {\n*         console.log( 'Unable to read any files.' );\n*     }\n* }\n*\n* // Try to read each element in `files`:\n* anyByRightAsync( files, done );\n*/\nfunction factory( options, predicate ) {\n\tvar opts;\n\tvar err;\n\tvar f;\n\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tf = predicate;\n\t} else {\n\t\tf = options;\n\t}\n\tif ( !isFunction( f ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Last argument must be a function. Value: `%s`.', f ) );\n\t}\n\tif ( opts.series ) {\n\t\topts.limit = 1;\n\t} else if ( !opts.limit ) {\n\t\topts.limit = PINF;\n\t}\n\treturn anyByRightAsync;\n\n\t/**\n\t* Invokes a predicate function for each element in a collection, iterating from right to left.\n\t*\n\t* @private\n\t* @param {Collection} collection - input collection\n\t* @param {Callback} done - function to invoke upon completion\n\t* @throws {TypeError} first argument must be a collection\n\t* @throws {TypeError} last argument must be a function\n\t* @returns {void}\n\t*/\n\tfunction anyByRightAsync( collection, done ) {\n\t\tif ( !isCollection( collection ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a collection. Value: `%s`.', collection ) );\n\t\t}\n\t\tif ( !isFunction( done ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Last argument must be a function. Value: `%s`.', done ) );\n\t\t}\n\t\treturn limit( collection, opts, f, clbk );\n\n\t\t/**\n\t\t* Callback invoked upon completion.\n\t\t*\n\t\t* @private\n\t\t* @param {*} [error] - error\n\t\t* @param {boolean} bool - test result\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction clbk( error, bool ) {\n\t\t\tif ( error ) {\n\t\t\t\treturn done( error, false );\n\t\t\t}\n\t\t\tdone( null, bool );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Tests whether at least one element in a collection passes a test implemented by a predicate function, iterating from right to left.\n*\n* ## Notes\n*\n* -   If a predicate function calls the provided callback with a truthy error argument, the function suspends execution and immediately calls the `done` callback for subsequent error handling.\n* -   This function does **not** guarantee that execution is asynchronous. To do so, wrap the `done` callback in a function which either executes at the end of the current stack (e.g., `nextTick`) or during a subsequent turn of the event loop (e.g., `setImmediate`, `setTimeout`).\n*\n*\n* @param {Collection} collection - input collection\n* @param {Options} [options] - function options\n* @param {*} [options.thisArg] - execution context\n* @param {PositiveInteger} [options.limit] - maximum number of pending invocations at any one time\n* @param {boolean} [options.series=false] - boolean indicating whether to wait for a previous invocation to complete before invoking a provided function for the next element in a collection\n* @param {Function} predicate - predicate function to invoke for each element in a collection\n* @param {Callback} done - function to invoke upon completion\n* @throws {TypeError} first argument must be a collection\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} second-to-last argument must be a function\n* @throws {TypeError} last argument must be a function\n* @returns {void}\n*\n* @example\n* var readFile = require( '@stdlib/fs-read-file' );\n*\n* function done( error, bool ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     if ( bool ) {\n*         console.log( 'Successfully read at least one file.' );\n*     } else {\n*         console.log( 'Unable to read any files.' );\n*     }\n* }\n*\n* function predicate( file, next ) {\n*     var opts = {\n*         'encoding': 'utf8'\n*     };\n*     readFile( file, opts, onFile );\n*\n*     function onFile( error ) {\n*         if ( error ) {\n*             return next( null, false );\n*         }\n*         next( null, true );\n*     }\n* }\n*\n* var files = [\n*     './beep.js',\n*     './boop.js'\n* ];\n*\n* anyByRightAsync( files, predicate, done );\n*/\nfunction anyByRightAsync( collection, options, predicate, done ) {\n\tif ( arguments.length < 4 ) {\n\t\treturn factory( options )( collection, predicate );\n\t}\n\tfactory( options, predicate )( collection, done );\n}\n\n\n// EXPORTS //\n\nmodule.exports = anyByRightAsync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test whether at least one element in a collection passes a test implemented by a predicate function, iterating from right to left.\n*\n* @module @stdlib/utils-async-any-by-right\n*\n* @example\n* var readFile = require( '@stdlib/fs-read-file' );\n* var anyByRightAsync = require( '@stdlib/utils-async-any-by-right' );\n*\n* var files = [\n*     './beep.js',\n*     './boop.js'\n* ];\n*\n* function done( error, bool ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     if ( bool ) {\n*         console.log( 'Successfully read at least one file.' );\n*     } else {\n*         console.log( 'Unable to read any files.' );\n*     }\n* }\n*\n* function predicate( file, next ) {\n*     var opts = {\n*         'encoding': 'utf8'\n*     };\n*     readFile( file, opts, onFile );\n*\n*     function onFile( error ) {\n*         if ( error ) {\n*             return next( null, false );\n*         }\n*         next( null, true );\n*     }\n* }\n*\n* anyByRightAsync( files, predicate, done );\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar anyByRightAsync = require( './any_by_right.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( anyByRightAsync, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = anyByRightAsync;\n"],"names":["isObject","require$$0","hasOwnProp","require$$1","isBoolean","require$$2","isPrimitive","isPositiveInteger","require$$3","format","require$$4","validate_1","opts","options","thisArg","series","TypeError","limit","module","exports","process","type","require","debug","logger","isFunction","isCollection","PINF","validate","collection","predicate","done","count","flg","lim","len","idx","i","length","next","JSON","stringify","call","clbk","error","result","message","factory_1","err","f","arguments","anyByRightAsync","bool","factory","lib"],"mappings":"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"}